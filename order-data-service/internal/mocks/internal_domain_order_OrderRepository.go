// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	order "github.com/lucasd-coder/fast-feet/order-data-service/internal/domain/order"
	mock "github.com/stretchr/testify/mock"
)

// OrderRepository_internal_domain_order is an autogenerated mock type for the OrderRepository type
type OrderRepository_internal_domain_order struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx, pld
func (_m *OrderRepository_internal_domain_order) FindAll(ctx context.Context, pld *order.GetAllOrderRequest) ([]order.Order, error) {
	ret := _m.Called(ctx, pld)

	var r0 []order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.GetAllOrderRequest) ([]order.Order, error)); ok {
		return rf(ctx, pld)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.GetAllOrderRequest) []order.Order); ok {
		r0 = rf(ctx, pld)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.GetAllOrderRequest) error); ok {
		r1 = rf(ctx, pld)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *OrderRepository_internal_domain_order) FindByID(ctx context.Context, id string) (*order.Order, error) {
	ret := _m.Called(ctx, id)

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*order.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *order.Order); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, _a1
func (_m *OrderRepository_internal_domain_order) Save(ctx context.Context, _a1 *order.Order) (*order.Order, error) {
	ret := _m.Called(ctx, _a1)

	var r0 *order.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) (*order.Order, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *order.Order) *order.Order); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*order.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *order.Order) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrderRepository_internal_domain_order creates a new instance of OrderRepository_internal_domain_order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrderRepository_internal_domain_order(t interface {
	mock.TestingT
	Cleanup(func())
}) *OrderRepository_internal_domain_order {
	mock := &OrderRepository_internal_domain_order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
