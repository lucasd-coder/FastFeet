// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"github.com/lucasd-coder/fast-feet/business-service/config"
	"github.com/lucasd-coder/fast-feet/business-service/internal/domain/order"
	handler2 "github.com/lucasd-coder/fast-feet/business-service/internal/domain/order/handler"
	"github.com/lucasd-coder/fast-feet/business-service/internal/domain/user"
	"github.com/lucasd-coder/fast-feet/business-service/internal/domain/user/handler"
	repository2 "github.com/lucasd-coder/fast-feet/business-service/internal/provider/authservice/repository"
	"github.com/lucasd-coder/fast-feet/business-service/internal/provider/cep"
	"github.com/lucasd-coder/fast-feet/business-service/internal/provider/managerservice/repository"
	repository3 "github.com/lucasd-coder/fast-feet/business-service/internal/provider/orderdataservice/repository"
	"github.com/lucasd-coder/fast-feet/business-service/internal/provider/validator"
	"github.com/lucasd-coder/fast-feet/business-service/internal/shared"
)

import (
	_ "net/http/pprof"
)

// Injectors from wire.go:

func InitializeUserHandler() *handler.Handler {
	configConfig := config.GetConfig()
	userRepository := repository.NewUserRepository(configConfig)
	authRepository := repository2.NewAuthRepository(configConfig)
	validation := &validator.Validation{}
	serviceImpl := user.NewService(userRepository, authRepository, validation)
	handlerHandler := handler.NewHandler(serviceImpl, configConfig)
	return handlerHandler
}

func InitializeOrderHandler() *handler2.Handler {
	validation := &validator.Validation{}
	configConfig := config.GetConfig()
	orderDataRepository := repository3.NewOrderDataRepository(configConfig)
	authRepository := repository2.NewAuthRepository(configConfig)
	cepRepository := cep.NewRepository(configConfig)
	serviceImpl := order.NewService(validation, orderDataRepository, authRepository, cepRepository)
	handlerHandler := handler2.NewHandler(serviceImpl, configConfig)
	return handlerHandler
}

// wire.go:

var initializeValidator = wire.NewSet(wire.Struct(new(validator.Validation)), wire.Bind(new(shared.Validator), new(*validator.Validation)))

var initializeUserRepository = wire.NewSet(wire.Bind(new(user.Repository), new(*repository.UserRepository)), repository.NewUserRepository)

var initializeAuthRepository = wire.NewSet(wire.Bind(new(shared.AuthRepository), new(*repository2.AuthRepository)), repository2.NewAuthRepository)

var initializeOrderDataRepository = wire.NewSet(wire.Bind(new(order.Repository), new(*repository3.OrderDataRepository)), repository3.NewOrderDataRepository)
