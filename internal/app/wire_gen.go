// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/lucasd-coder/router-service/config"
	"github.com/lucasd-coder/router-service/internal/controller"
	service2 "github.com/lucasd-coder/router-service/internal/domain/order/service"
	"github.com/lucasd-coder/router-service/internal/domain/user/service"
	"github.com/lucasd-coder/router-service/internal/provider/publish"
	"github.com/lucasd-coder/router-service/internal/provider/validator"
	"github.com/lucasd-coder/router-service/internal/shared"
)

// Injectors from wire.go:

func InitializeValidator() *validator.Validation {
	validation := validator.NewValidation()
	return validation
}

func InitializeOrderEventsPublish() *publish.Published {
	options := extractOptionOrderEvents()
	published := publish.NewPublished(options)
	return published
}

func InitializeUserEventsPublish() *publish.Published {
	options := extractOptionUserEvents()
	published := publish.NewPublished(options)
	return published
}

func InitializeUserService() *service.UserService {
	validation := InitializeValidator()
	published := InitializeUserEventsPublish()
	configConfig := config.GetConfig()
	userService := service.NewUserService(validation, published, configConfig)
	return userService
}

func InitializeUserController() *controller.UserController {
	userService := InitializeUserService()
	userController := controller.NewUserController(userService)
	return userController
}

func InitializeOrderService() *service2.OrderService {
	validation := InitializeValidator()
	published := InitializeOrderEventsPublish()
	configConfig := config.GetConfig()
	orderService := service2.NewOrderService(validation, published, configConfig)
	return orderService
}

func InitializeOrderController() *controller.OrderController {
	orderService := InitializeOrderService()
	orderController := controller.NewOrderController(orderService)
	return orderController
}

// wire.go:

func extractOptionOrderEvents() *shared.Options {
	cfg := config.GetConfig()
	return &shared.Options{
		TopicURL:    cfg.TopicOrderEvents.URL,
		MaxRetries:  cfg.TopicOrderEvents.MaxRetries,
		WaitingTime: cfg.TopicOrderEvents.WaitingTime,
	}
}

func extractOptionUserEvents() *shared.Options {
	cfg := config.GetConfig()
	return &shared.Options{
		TopicURL:    cfg.TopicUserEvents.URL,
		MaxRetries:  cfg.TopicUserEvents.MaxRetries,
		WaitingTime: cfg.TopicUserEvents.WaitingTime,
	}
}
