// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/google/wire"
	"github.com/lucasd-coder/router-service/config"
	"github.com/lucasd-coder/router-service/internal/controller"
	"github.com/lucasd-coder/router-service/internal/domain/order"
	"github.com/lucasd-coder/router-service/internal/domain/user"
	"github.com/lucasd-coder/router-service/internal/provider/businessservice/repository"
	"github.com/lucasd-coder/router-service/internal/provider/publish"
	"github.com/lucasd-coder/router-service/internal/provider/validator"
	"github.com/lucasd-coder/router-service/internal/shared"
)

// Injectors from wire.go:

func InitializeValidator() *validator.Validation {
	validation := validator.NewValidation()
	return validation
}

func InitializeOrderEventsPublish() *publish.Published {
	options := extractOptionOrderEvents()
	published := publish.NewPublished(options)
	return published
}

func InitializeUserEventsPublish() *publish.Published {
	options := extractOptionUserEvents()
	published := publish.NewPublished(options)
	return published
}

func InitializeUserController() *controller.UserController {
	validation := InitializeValidator()
	published := InitializeUserEventsPublish()
	configConfig := config.GetConfig()
	businessRepository := repository.NewBusinessRepository(configConfig)
	serviceImpl := user.NewService(validation, published, configConfig, businessRepository)
	userController := controller.NewUserController(serviceImpl)
	return userController
}

func InitializeOrderController() *controller.OrderController {
	validation := InitializeValidator()
	published := InitializeOrderEventsPublish()
	configConfig := config.GetConfig()
	businessRepository := repository.NewBusinessRepository(configConfig)
	serviceImpl := order.NewService(validation, published, configConfig, businessRepository)
	orderController := controller.NewOrderController(serviceImpl)
	return orderController
}

// wire.go:

func extractOptionOrderEvents() *shared.Options {
	cfg := config.GetConfig()
	return &shared.Options{
		TopicURL:    cfg.TopicOrderEvents.URL,
		MaxRetries:  cfg.TopicOrderEvents.MaxRetries,
		WaitingTime: cfg.TopicOrderEvents.WaitingTime,
	}
}

func extractOptionUserEvents() *shared.Options {
	cfg := config.GetConfig()
	return &shared.Options{
		TopicURL:    cfg.TopicUserEvents.URL,
		MaxRetries:  cfg.TopicUserEvents.MaxRetries,
		WaitingTime: cfg.TopicUserEvents.WaitingTime,
	}
}

var initializeBusinessRepository = wire.NewSet(wire.Bind(new(shared.BusinessRepository), new(*repository.BusinessRepository)), repository.NewBusinessRepository)
