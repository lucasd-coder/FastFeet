// Code generated by mockery v2.37.1. DO NOT EDIT.

package mocks

import (
	context "context"

	auth "github.com/lucasd-coder/fast-feet/auth-service/internal/domain/auth"

	mock "github.com/stretchr/testify/mock"
)

// Repository_internal_domain_auth is an autogenerated mock type for the Repository type
type Repository_internal_domain_auth struct {
	mock.Mock
}

// FindUserByEmail provides a mock function with given fields: ctx, pld
func (_m *Repository_internal_domain_auth) FindUserByEmail(ctx context.Context, pld *auth.FindUserByEmail) (*auth.UserRepresentation, error) {
	ret := _m.Called(ctx, pld)

	var r0 *auth.UserRepresentation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.FindUserByEmail) (*auth.UserRepresentation, error)); ok {
		return rf(ctx, pld)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.FindUserByEmail) *auth.UserRepresentation); ok {
		r0 = rf(ctx, pld)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.UserRepresentation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.FindUserByEmail) error); ok {
		r1 = rf(ctx, pld)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoles provides a mock function with given fields: ctx, pld
func (_m *Repository_internal_domain_auth) GetRoles(ctx context.Context, pld *auth.GetUserID) ([]string, error) {
	ret := _m.Called(ctx, pld)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetUserID) ([]string, error)); ok {
		return rf(ctx, pld)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetUserID) []string); ok {
		r0 = rf(ctx, pld)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.GetUserID) error); ok {
		r1 = rf(ctx, pld)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsActiveUser provides a mock function with given fields: ctx, pld
func (_m *Repository_internal_domain_auth) IsActiveUser(ctx context.Context, pld *auth.GetUserID) (bool, error) {
	ret := _m.Called(ctx, pld)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetUserID) (bool, error)); ok {
		return rf(ctx, pld)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.GetUserID) bool); ok {
		r0 = rf(ctx, pld)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.GetUserID) error); ok {
		r1 = rf(ctx, pld)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: ctx, pld
func (_m *Repository_internal_domain_auth) Register(ctx context.Context, pld *auth.Register) (string, error) {
	ret := _m.Called(ctx, pld)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *auth.Register) (string, error)); ok {
		return rf(ctx, pld)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *auth.Register) string); ok {
		r0 = rf(ctx, pld)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *auth.Register) error); ok {
		r1 = rf(ctx, pld)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository_internal_domain_auth creates a new instance of Repository_internal_domain_auth. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository_internal_domain_auth(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository_internal_domain_auth {
	mock := &Repository_internal_domain_auth{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
