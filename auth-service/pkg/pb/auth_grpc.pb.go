// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: request/auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthHandler_FindUserByEmail_FullMethodName = "/pb.AuthHandler/FindUserByEmail"
	AuthHandler_GetRoles_FullMethodName        = "/pb.AuthHandler/GetRoles"
	AuthHandler_IsActiveUser_FullMethodName    = "/pb.AuthHandler/IsActiveUser"
)

// AuthHandlerClient is the client API for AuthHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthHandlerClient interface {
	FindUserByEmail(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetUserResponse, error)
	GetRoles(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetRolesResponse, error)
	IsActiveUser(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IsActiveUserResponse, error)
}

type authHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthHandlerClient(cc grpc.ClientConnInterface) AuthHandlerClient {
	return &authHandlerClient{cc}
}

func (c *authHandlerClient) FindUserByEmail(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetUserResponse, error) {
	out := new(GetUserResponse)
	err := c.cc.Invoke(ctx, AuthHandler_FindUserByEmail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authHandlerClient) GetRoles(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*GetRolesResponse, error) {
	out := new(GetRolesResponse)
	err := c.cc.Invoke(ctx, AuthHandler_GetRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authHandlerClient) IsActiveUser(ctx context.Context, in *EmptyRequest, opts ...grpc.CallOption) (*IsActiveUserResponse, error) {
	out := new(IsActiveUserResponse)
	err := c.cc.Invoke(ctx, AuthHandler_IsActiveUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthHandlerServer is the server API for AuthHandler service.
// All implementations must embed UnimplementedAuthHandlerServer
// for forward compatibility
type AuthHandlerServer interface {
	FindUserByEmail(context.Context, *EmptyRequest) (*GetUserResponse, error)
	GetRoles(context.Context, *EmptyRequest) (*GetRolesResponse, error)
	IsActiveUser(context.Context, *EmptyRequest) (*IsActiveUserResponse, error)
	mustEmbedUnimplementedAuthHandlerServer()
}

// UnimplementedAuthHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedAuthHandlerServer struct {
}

func (UnimplementedAuthHandlerServer) FindUserByEmail(context.Context, *EmptyRequest) (*GetUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByEmail not implemented")
}
func (UnimplementedAuthHandlerServer) GetRoles(context.Context, *EmptyRequest) (*GetRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRoles not implemented")
}
func (UnimplementedAuthHandlerServer) IsActiveUser(context.Context, *EmptyRequest) (*IsActiveUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsActiveUser not implemented")
}
func (UnimplementedAuthHandlerServer) mustEmbedUnimplementedAuthHandlerServer() {}

// UnsafeAuthHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthHandlerServer will
// result in compilation errors.
type UnsafeAuthHandlerServer interface {
	mustEmbedUnimplementedAuthHandlerServer()
}

func RegisterAuthHandlerServer(s grpc.ServiceRegistrar, srv AuthHandlerServer) {
	s.RegisterService(&AuthHandler_ServiceDesc, srv)
}

func _AuthHandler_FindUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthHandlerServer).FindUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthHandler_FindUserByEmail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthHandlerServer).FindUserByEmail(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthHandler_GetRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthHandlerServer).GetRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthHandler_GetRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthHandlerServer).GetRoles(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthHandler_IsActiveUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthHandlerServer).IsActiveUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthHandler_IsActiveUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthHandlerServer).IsActiveUser(ctx, req.(*EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthHandler_ServiceDesc is the grpc.ServiceDesc for AuthHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthHandler",
	HandlerType: (*AuthHandlerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUserByEmail",
			Handler:    _AuthHandler_FindUserByEmail_Handler,
		},
		{
			MethodName: "GetRoles",
			Handler:    _AuthHandler_GetRoles_Handler,
		},
		{
			MethodName: "IsActiveUser",
			Handler:    _AuthHandler_IsActiveUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "request/auth.proto",
}
