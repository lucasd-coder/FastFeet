// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: request/register.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RegisterHandler_CreateUser_FullMethodName = "/pb.RegisterHandler/CreateUser"
)

// RegisterHandlerClient is the client API for RegisterHandler service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterHandlerClient interface {
	CreateUser(ctx context.Context, opts ...grpc.CallOption) (RegisterHandler_CreateUserClient, error)
}

type registerHandlerClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterHandlerClient(cc grpc.ClientConnInterface) RegisterHandlerClient {
	return &registerHandlerClient{cc}
}

func (c *registerHandlerClient) CreateUser(ctx context.Context, opts ...grpc.CallOption) (RegisterHandler_CreateUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &RegisterHandler_ServiceDesc.Streams[0], RegisterHandler_CreateUser_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &registerHandlerCreateUserClient{stream}
	return x, nil
}

type RegisterHandler_CreateUserClient interface {
	Send(*RegisterRequest) error
	Recv() (*RegisterResponse, error)
	grpc.ClientStream
}

type registerHandlerCreateUserClient struct {
	grpc.ClientStream
}

func (x *registerHandlerCreateUserClient) Send(m *RegisterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerHandlerCreateUserClient) Recv() (*RegisterResponse, error) {
	m := new(RegisterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterHandlerServer is the server API for RegisterHandler service.
// All implementations must embed UnimplementedRegisterHandlerServer
// for forward compatibility
type RegisterHandlerServer interface {
	CreateUser(RegisterHandler_CreateUserServer) error
	mustEmbedUnimplementedRegisterHandlerServer()
}

// UnimplementedRegisterHandlerServer must be embedded to have forward compatible implementations.
type UnimplementedRegisterHandlerServer struct {
}

func (UnimplementedRegisterHandlerServer) CreateUser(RegisterHandler_CreateUserServer) error {
	return status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedRegisterHandlerServer) mustEmbedUnimplementedRegisterHandlerServer() {}

// UnsafeRegisterHandlerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterHandlerServer will
// result in compilation errors.
type UnsafeRegisterHandlerServer interface {
	mustEmbedUnimplementedRegisterHandlerServer()
}

func RegisterRegisterHandlerServer(s grpc.ServiceRegistrar, srv RegisterHandlerServer) {
	s.RegisterService(&RegisterHandler_ServiceDesc, srv)
}

func _RegisterHandler_CreateUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterHandlerServer).CreateUser(&registerHandlerCreateUserServer{stream})
}

type RegisterHandler_CreateUserServer interface {
	Send(*RegisterResponse) error
	Recv() (*RegisterRequest, error)
	grpc.ServerStream
}

type registerHandlerCreateUserServer struct {
	grpc.ServerStream
}

func (x *registerHandlerCreateUserServer) Send(m *RegisterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerHandlerCreateUserServer) Recv() (*RegisterRequest, error) {
	m := new(RegisterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterHandler_ServiceDesc is the grpc.ServiceDesc for RegisterHandler service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegisterHandler_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RegisterHandler",
	HandlerType: (*RegisterHandlerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateUser",
			Handler:       _RegisterHandler_CreateUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "request/register.proto",
}
