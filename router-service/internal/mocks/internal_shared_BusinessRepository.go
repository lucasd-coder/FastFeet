// Code generated by mockery v2.42.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pb "github.com/lucasd-coder/fast-feet/router-service/pkg/pb"
	mock "github.com/stretchr/testify/mock"
)

// BusinessRepository_internal_shared is an autogenerated mock type for the BusinessRepository type
type BusinessRepository_internal_shared struct {
	mock.Mock
}

// FindByEmail provides a mock function with given fields: ctx, req
func (_m *BusinessRepository_internal_shared) FindByEmail(ctx context.Context, req *pb.UserByEmailRequest) (*pb.UserResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for FindByEmail")
	}

	var r0 *pb.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UserByEmailRequest) (*pb.UserResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.UserByEmailRequest) *pb.UserResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.UserByEmailRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllOrder provides a mock function with given fields: ctx, req
func (_m *BusinessRepository_internal_shared) GetAllOrder(ctx context.Context, req *pb.GetAllOrderRequest) (*pb.GetAllOrderResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetAllOrder")
	}

	var r0 *pb.GetAllOrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllOrderRequest) (*pb.GetAllOrderResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pb.GetAllOrderRequest) *pb.GetAllOrderResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.GetAllOrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pb.GetAllOrderRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewBusinessRepository_internal_shared creates a new instance of BusinessRepository_internal_shared. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBusinessRepository_internal_shared(t interface {
	mock.TestingT
	Cleanup(func())
}) *BusinessRepository_internal_shared {
	mock := &BusinessRepository_internal_shared{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
