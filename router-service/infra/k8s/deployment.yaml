apiVersion: apps/v1
kind: Deployment
metadata:
  name: router-service
spec:
  replicas: 1
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: router-service
  template:
    metadata:
      labels:
        app: router-service
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '8080'
    spec:
      containers:
        - name: router-service
          image: lucasd-coder/router-service:latest          
          resources:
            requests:
              memory: "500Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"         
          env:
            - name: LOG_LEVEL
              value: info          
            - name: HTTP_PORT
              value: "8080"
            - name: BUSINESS_SERVICE_URL
              value: "business-service.default.svc.cluster.local:50051"
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "opentelemetry-collector.default.svc.cluster.local:4317"
            - name: AES_KEY
              valueFrom:
                secretKeyRef:
                  name: aeskey
                  key: aes-key-config
            - name: RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: router-service-rabbitmq-username
                  key: rabbitmq-username
            - name: RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: router-service-rabbitmq-password
                  key: rabbitmq-password
            - name: RABBIT_SERVER_URL
              value: "amqp://$(RABBITMQ_USERNAME):$(RABBITMQ_PASSWORD)@rabbitmq.default.svc.cluster.local:5672/fastfeet"

          ports:
            - containerPort: 8080
          readinessProbe:
            httpGet:
              port: 8080
              path: "/health"
            initialDelaySeconds: 45
            periodSeconds: 10
          livenessProbe:            
            httpGet:
              port: 8080
              path: "/health"
            initialDelaySeconds: 45
            periodSeconds: 10
          lifecycle:
              preStop:
                exec:
                  command:
                    - /bin/sleep
                    - "30"
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: router-service
  name: router-service
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '8080'
spec:
  ports:
  - port: 8080
    name: http-metrics
    protocol: TCP      
    targetPort: 8080
  selector:
    app: router-service

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: router-service
  name: router-service
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: router-service
  minReplicas: 1
  maxReplicas: 2
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
