apiVersion: v1
kind: ConfigMap
metadata:
  name: krakend-conf
  labels:
    app: krakend
data:
  krakend-config: |
    {
      "$schema": "https://www.krakend.io/schema/v3.json",
      "version": 3,
      "name": "KrakenD Community API Gateway",
      "port": 8080,    
      "timeout": "3000ms",
      "endpoints": [
        {
          "@comment": "Feature: User Manager",
          "endpoint": "/api-gateway/users",
          "method": "POST",
          "backend": [
            {  
              "host": ["http://router-service.default.svc.cluster.local:8080"],
              "url_pattern": "/users",
              "extra_config": {
                "backend/http": {
                  "return_error_code": true              
                }              
              }
            }
          ]
        },
        {
          "@comment": "Feature: Create Order",
          "endpoint": "/api-gateway/orders",
          "method": "POST",
          "output_encoding": "json",
          "input_headers": [
            "Authorization"
          ],
          "extra_config": {
            "auth/validator": {
              "cache": true,
              "cache_duration": 600,
              "alg": "RS256",
              "jwk_url": "http://keycloak.default.svc.cluster.local:80/auth/realms/fastfeet/protocol/openid-connect/certs",
              "disable_jwk_security": true,
              "roles_key_is_nested": true,
              "roles_key": "realm_access.roles",
              "roles": ["admin"],
              "operation_debug": true
            }
          },
          "backend": [
            {
              "host": ["http://router-service.default.svc.cluster.local:8080"],
              "url_pattern": "/orders/{JWT.sub}",
              "method": "POST",
              "extra_config": {
                "backend/http": {
                  "return_error_code": true              
                }  
              }
            }
          ]
        },
        {
          "@comment": "Feature: Get all Order",
          "endpoint": "/api-gateway/all/orders",
          "method": "GET",
          "output_encoding": "json",
          "input_query_strings": [
            "id",
            "deliverymanId",
            "startDate",
            "endDate",
            "createdAt",
            "updatedAt",
            "canceledAt",
            "product.name",
            "address",
            "address.postalCode",
            "address.neighborhood",
            "address.city",
            "address.state",
            "address.number",
            "offset",
            "limit"
          ],
          "input_headers": [
            "Authorization"
          ],
          "extra_config": {
            "auth/validator": {
              "cache": true,
              "cache_duration": 600,
              "alg": "RS256",
              "jwk_url": "http://keycloak.default.svc.cluster.local:80/auth/realms/fastfeet/protocol/openid-connect/certs",
              "disable_jwk_security": true,
              "roles_key_is_nested": true,
              "roles_key": "realm_access.roles",
              "roles": ["admin", "user"],
              "operation_debug": true
            }
          },
          "backend": [
            {
              "host": ["http://router-service.default.svc.cluster.local:8080"],
              "url_pattern": "/orders/{JWT.sub}",
              "method": "GET",
              "extra_config": {
                "backend/http": {
                  "return_error_code": true              
                }  
              }
            }
          ]
        },
        {
          "@comment": "Feature: Get user by email",
          "endpoint": "/api-gateway/users/{email}",
          "method": "GET",
          "output_encoding": "json",
          "input_headers": [
            "Authorization"
          ],
          "extra_config": {
            "auth/validator": {
              "cache": true,
              "cache_duration": 600,
              "alg": "RS256",
              "jwk_url": "http://keycloak.default.svc.cluster.local:80/auth/realms/fastfeet/protocol/openid-connect/certs",
              "disable_jwk_security": true,
              "roles_key_is_nested": true,
              "roles_key": "realm_access.roles",
              "roles": ["admin", "user"],
              "operation_debug": true
            }
          },
          "backend": [
            {
              "host": ["http://router-service.default.svc.cluster.local:8080"],
              "url_pattern": "/users/{email}",
              "method": "GET",
              "extra_config": {
                "backend/http": {
                  "return_error_code": true              
                }  
              }
            }
          ]
        }
      ],
      "extra_config": {
        "router": {
          "return_error_msg": true
        },
        "telemetry/logging": {
          "level": "DEBUG",
          "prefix": "[KRAKEND]",
          "syslog": false,
          "stdout": true
        },
        "telemetry/opencensus": {
          "sample_rate": 100,
          "reporting_period": 1,
          "enabled_layers": {
            "backend": true,
            "router": true,
            "pipe": true
          },
          "exporters": {
            "jaeger": {
              "endpoint": "http://jaeger-collector.default.svc.cluster.local:14268/api/traces",
              "service_name": "krakend",
              "buffer_max_count": 1000
            },
            "prometheus": {
              "port": 9090,
              "namespace": "krakend",
              "tag_host": true,
              "tag_path": true,
              "tag_method": true,
              "tag_statuscode": true
            }
          }
        }     
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: krakend
spec:
  selector:
    matchLabels:
      app: krakend
  replicas: 1
  minReadySeconds: 10
  strategy: 
      type: "RollingUpdate"
      rollingUpdate: 
        maxSurge: 1
        maxUnavailable: 1
  template:
    metadata:
      labels:
        app: krakend
      annotations:
        prometheus.io/scrape: 'true'        
        prometheus.io/path: '/metrics'
        prometheus.io/port: '9090'
    spec:
      containers:
      - name: krakend
        image: devopsfaith/krakend:2.4
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
        - containerPort: 9090
        resources:
          requests:
            memory: "500Mi"
            cpu: 1
          limits:
            memory: "1Gi"
            cpu: 1        
        command: [ "/usr/bin/krakend" ]
        args: [ "run", "-d", "-c", "/conf/krakend-config.json", "-p", "8080" ]
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 1000
          readOnlyRootFilesystem: true
          capabilities:
            drop:
              - ALL
            add:
              - NET_BIND_SERVICE
        env:
        - name: KRAKEND_PORT
          value: "8080"
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
          - name: krakend-config-vol
            mountPath: /conf
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      terminationGracePeriodSeconds: 30
      volumes:
        - configMap:
            defaultMode: 420
            items:
              - key: krakend-config
                path: krakend-config.json
            name: krakend-conf
          name: krakend-config-vol
---
apiVersion: v1
kind: Service
metadata:
  name: krakend
  labels:
    app: krakend
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/path: '/metrics'
    prometheus.io/port: '9090'
spec:
  ports:
  - name: prometheus-metrics
    port: 9090
    targetPort: 9090
  - name: http
    port: 8080
    targetPort: 8080
  selector:
    app: krakend
  type: ClusterIP


